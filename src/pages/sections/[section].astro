---
import Layout from '@/layouts/Layout.astro';
import Modal from '@/components/Modal.astro';

import { Code } from 'astro:components';
import type { BundledLanguage } from 'shiki'; 
import { sectionsBlocksData } from '@/data/sectionsBlocksData';

import CopyIcon from '@/assets/icons/copyIcon.astro';
import CheckIcon from '@/assets/icons/checkIcon.astro';
import AstroIcon from '@/assets/icons/astro-icon.astro';
import CodeIcon from '@/assets/icons/codeIcon.astro';
import ArrowRight from '@/assets/icons/arrow-right.astro';
import Home from '@/assets/icons/home.astro';

const selectedComponent = sectionsBlocksData.find((comp) => comp.id === Astro.params.section);
const selectedCode = sectionsBlocksData.find((code) => code.id === Astro.params.section);

if (!selectedComponent || !selectedCode) {
	throw new Error(`Component or code with id "${Astro.params.section}" not found`);
}

export function getStaticPaths() {
  return sectionsBlocksData.map((comp) => ({
    params: { section: comp.id },
  }));
}

---

<Layout title={`UIComponentes | ${selectedComponent.title}`}>
    <selectedComponent.component/>

<nav class="flex animate-slide-in-left md:hover:-translate-y-12 transition-all duration-300 fixed left-2 bottom-0 md:-bottom-12 z-50 bg-surface/60 backdrop-blur-2xl border border-zinc-800 rounded-t-2xl p-2 shadow-2xl">
          <div class="flex gap-4">
              <a 
              href="/sections"
              aria-label="Go to sections"
                class="group relative flex items-center justify-center w-12 h-12 bg-slate-800/50 hover:bg-slate-700/60 rounded-xl transition-all duration-300 hover:scale-110"
              >
                <ArrowRight class='w-5 h-5 rotate-180 text-gray-300 group-hover:text-white transition-colors duration-300 relative z-10'/>
                <div class={`absolute inset-0 bg-gradient-to-br from-zinc-700/40 to-black/40 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300`}>
                </div>

                <div class="z-20 absolute left-1/2 -top-10 -translate-x-1/2 flex flex-col-reverse items-center opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none">
                    <span class="w-0 h-0 border-t-5 rotate-90 border-b-5 border-l-5 border-r-5 border-r-transparent border-t-transparent border-b-transparent border-l-slate-700"></span>
                    <div class="bg-slate-800 border border-slate-700 backdrop-blur-sm text-white text-sm px-3 py-1 rounded-lg whitespace-nowrap">Back</div>
                </div>
              </a>
              <a 
              href="/"
              aria-label="Go to home"
                class="group relative flex items-center justify-center w-12 h-12 bg-slate-800/50 hover:bg-slate-700/60 rounded-xl transition-all duration-300 hover:scale-110"
              >
                <Home class='w-5 h-5 text-gray-300 group-hover:text-white transition-colors duration-300 relative z-10'/>
                <div class={`absolute inset-0 bg-gradient-to-br from-zinc-700/40 to-black/40 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300`}>
                </div>

                <div class="z-20 absolute left-1/2 -top-10 -translate-x-1/2 flex flex-col-reverse items-center opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none">
                    <span class="w-0 h-0 border-t-5 rotate-90 border-b-5 border-l-5 border-r-5 border-r-transparent border-t-transparent border-b-transparent border-l-slate-700"></span>
                    <div class="bg-slate-800 border border-slate-700 backdrop-blur-sm text-white text-sm px-3 py-1 rounded-lg whitespace-nowrap">Home</div>
                </div>
              </a>
              <button 
              data-modal-target={`modal-${selectedComponent.id}`}
              aria-label="View the code"
                class="group cursor-pointer relative flex items-center justify-center w-12 h-12 bg-slate-800/50 hover:bg-slate-700/60 rounded-xl transition-all duration-300 hover:scale-110"
              >
                <CodeIcon class='w-5 h-5 text-gray-300 group-hover:text-white transition-colors duration-300 relative z-10'/>
                <div class={`absolute inset-0 bg-gradient-to-br from-zinc-700/40 to-black/40 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300`}>
                </div>

                <div class="z-20 absolute left-1/2 -top-10 -translate-x-1/2 flex flex-col-reverse items-center opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none">
                    <span class="w-0 h-0 border-t-5 rotate-90 border-b-5 border-l-5 border-r-5 border-r-transparent border-t-transparent border-b-transparent border-l-slate-700"></span>
                    <div class="bg-slate-800 border border-slate-700 backdrop-blur-sm text-white text-sm px-3 py-1 rounded-lg whitespace-nowrap">Code</div>
                </div>
              </button>
      </div>
        </nav>

    <Modal id={`modal-${selectedComponent.id}`} title={selectedComponent.title}>
        <div class="flex flex-col justify-center items-center">
          <footer class="flex flex-col gap-y-10 justify-center items-center w-full">
            <div class="group relative w-full max-w-4xl px-2 py-10 sm:px-4 overflow-x-auto">
              <Code code={`${selectedComponent.code}`} lang={selectedComponent.lang as BundledLanguage} wrap />
              <p class="component-name"><AstroIcon class="size-4 text-orange-500"/>{selectedComponent.id.charAt(0).toUpperCase() + selectedComponent.id.slice(1)}.{selectedComponent.lang}</p>
              <div class="absolute top-13 right-7 flex justify-end items-center gap-5">
              <button role="button" class="copy-button text-white px-1 py-1 rounded-sm hover:bg-slate-600/80 transition-colors duration-300 cursor-pointer">
                <CopyIcon class="copy-icon size-3"/>
                <CheckIcon class="copy-icon-check hidden size-3"/>
              </button>
              </div>
            </div>
          </footer>
        </div>
    </Modal>
</Layout>

<script is:inline>

    document.addEventListener('click', (e) => {
    if (e.target.closest('.copy-button')) {
        const copyBtn = e.target.closest('.copy-button');
        let textToCopy = '';
        let copyMethod = '';
        
        const inlineContainer = copyBtn.closest('[data-code-container]');
        if (inlineContainer) {
            const executableName = inlineContainer.querySelector('.text-\\[\\#82AAFF\\]')?.textContent || '';
            const content = inlineContainer.querySelector('.text-\\[\\#ECC48D\\]')?.textContent || '';
            textToCopy = `${executableName}${content}`.trim();
            copyMethod = 'inline';
        }
        
        else {
            let container = copyBtn.parentElement;
            while (container && !container.classList.contains('group') && !container.classList.contains('modal')) {
                container = container.parentElement;
            }
            
            if (container) {
                const codeElement = container.querySelector('pre code');
                if (codeElement) {
                    textToCopy = codeElement.textContent.trim();
                    copyMethod = 'modal';
                }
            }
        }
        
        if (!textToCopy) {
            const nearestCode = copyBtn.closest('div').querySelector('code') || 
            copyBtn.parentElement.querySelector('code');
            if (nearestCode) {
                textToCopy = nearestCode.textContent.trim();
                copyMethod = 'fallback';
            }
        }
        
        if (textToCopy) {
            const copyIcon = copyBtn.querySelector('.copy-icon');
            const copyIconCheck = copyBtn.querySelector('.copy-icon-check');
            
            navigator.clipboard.writeText(textToCopy)
                .then(() => {
                    copyIcon.classList.add("hidden");
                    copyIconCheck.classList.remove("hidden");
                    
                    setTimeout(() => {
                        copyIcon.classList.remove("hidden");
                        copyIconCheck.classList.add("hidden");
                    }, 2000);
                })
                .catch(err => {
                    console.error("Error copying text: ", err);
                });
        } else {
            console.warn("No code found to copy near the button");
        }
    }
});

    document.querySelectorAll(".astro-code").forEach((codeBlock) => {
    codeBlock.className = "rounded-b-md rounded-tr-md p-3 border border-gray-500/50 transition-all duration-300";
    });

    document.querySelectorAll(".component-name").forEach((componentName) => {
        componentName.className = "absolute flex items-center gap-2 top-4 -left-1 bg-[#1a1e23] w-fit ml-5 mb-1.5 border-r border-l border-t border-gray-500/50 text-gray-300 text-xs px-3 py-1 rounded-t-sm font-mono";
    });

</script>

